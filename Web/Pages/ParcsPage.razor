@page "/parcs"
@using Web.Models
@using Web.Services
@inject ParcService ParcService
@inject NavigationManager NavigationManager

<h1>Liste des parcs</h1>

<div>
    <a href="/create-parc" class="btn btn-success">Créer un parc</a>
</div>

@if (ParcList == null)
{
    <p>Chargement...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nom</th>
                <th>Actif</th>
                <th>Crée le</th>
                <th>Modifié le</th>
                <th>ID Utilisateur</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var parc in ParcList)
            {
                <tr>
                    <td>@parc.id</td>
                    <td>@parc.name</td>
                    <td>@parc.isenabled</td>
                    <td>@parc.createdat</td>
                    <td>@parc.updatedat</td>
                    <td>@parc.userid</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditParc(parc.id)">Modifier</button>
                        <button class="btn btn-danger" @onclick="() => DeleteParc(parc.id)">Supprimer</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private parcs[] ParcList;

    protected override async Task OnInitializedAsync()
    {
        ParcList = await ParcService.GetParcs();
    }

    private async Task LoadParcs()
    {
        ParcList = await ParcService.GetParcs();
    }

    private void EditParc(int parcId)
    {
        NavigationManager.NavigateTo($"/edit-parc/{parcId}");
    }

    private async Task DeleteParc(int id)
    {
        var result = await ParcService.DeleteParc(id.ToString());
        if (result)
        {
            await LoadParcs();
        }
        else
        {
            // Handle delete error
        }
    }
}

