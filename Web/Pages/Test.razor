@page "/test"

@inject HttpClient Http
@inject NavigationManager Navigation

@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@using System.Threading.Tasks

<h3>Login</h3>

@if (isAuthenticated)
{
    <div>
        <h4>Token</h4>
        <textarea class="form-control" rows="4" readonly>@token</textarea>
    </div>
}
else
{
    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="user">Utilisateur</label>
            <InputText id="user" class="form-control" @bind-Value="loginModel.User" />
        </div>
        <div class="form-group">
            <label for="password">Mot de passe</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
}

@code {
    private LoginModel loginModel = new LoginModel();
    private bool isAuthenticated = false;
    private string token;

    private async Task HandleLogin()
    {
        try
        {
            Console.WriteLine("HandleLogin déclenché");

            var formContent = new MultipartFormDataContent
            {
                { new StringContent(loginModel.User), "user" },
                { new StringContent(loginModel.Password), "password" }
            };

            Console.WriteLine("Envoi de la requête");

            var response = await Http.PostAsync("http://localhost:5062/api/authentification/", formContent);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var tokenResponse = JsonSerializer.Deserialize<TokenResponse>(json, new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase });

                token = tokenResponse.Token;
                isAuthenticated = true;

                Console.WriteLine("Login réussi, token reçu");
            }
            else
            {
                Console.WriteLine($"Erreur de login: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during login: {ex.Message}");
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Le nom d'utilisateur est requis")]
        public string User { get; set; }

        [Required(ErrorMessage = "Le mot de passe est requis")]
        public string Password { get; set; }
    }

    public class TokenResponse
    {
        public string Token { get; set; }
    }
}
